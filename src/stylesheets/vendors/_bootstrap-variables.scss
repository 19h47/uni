@use 'sass:math';

$prototype-width-unitless: 2560;
$prototype-height-unitless: 1440;

$base-font-size: 16;
$base-line-height: 22;

$font-size-root: $base-font-size;
$line-height-base: math.div($base-line-height, $base-font-size);

$enable-important-utilities: false;

/**
 * Grid columns number
 *
 * Number of columns in the grid, it override `$grid-columns` from
 * bootstrap-sass. It means, if you wish, that you can instantiate a grid of 8,
 * for example.
 *
 * @see https://github.com/twbs/bootstrap-sass/blob/master/assets/stylesheets/bootstrap/_variables.scss#L329
 */
// $grid-columns: 14;

/**
 * Gutter width
 *
 * Padding between columns. Gets divided in half for the left and right, it
 * overide `$grid-gutter-width` from bootstrap-sass
 *
 * @see http://stackoverflow.com/a/28193872/5091221
 * @see https://github.com/twbs/bootstrap-sass/blob/master/assets/stylesheets/bootstrap/_variables.scss#L331
 */
// $grid-gutter-width-unitless: 24;
// $grid-gutter-width: ($grid-gutter-width-unitless * 1px);

/**
 * Grid breakpoints
 *
 * Define the minimum dimensions at which your layout will change,
 * adapting to different screen sizes, for use in media queries.
 *
 * @see https://github.com/twbs/bootstrap/blob/v4-dev/scss/_variables.scss#L180
 */
$grid-breakpoints: (
	xs: 0,
	md: 992px,
);

$position-values: map-merge(
	$position-values,
	(
		auto: auto,
	)
);

$sizes: (
	1em: 1em,
	6px: #{math.div(6, $base-font-size)}rem,
	16px: #{math.div(16, $base-font-size)}rem,
	20px: #{math.div(20, $base-font-size)}rem,
	24px: #{math.div(24, $base-font-size)}rem,
	40px: #{math.div(40, $base-font-size)}rem,
	60px: #{math.div(60, $base-font-size)}rem,
	120px: #{math.div(120, $base-font-size)}rem,
	400px: #{math.div(400, $base-font-size)}rem,
	1\/3: percentage(math.div(1, 3)),
	2\/3: percentage(math.div(2, 3)),
	2\/12: percentage(math.div(2, 12)),
	8\/12: percentage(math.div(8, 12)),
	10\/12: percentage(math.div(10, 12)),
	12\.5: 12.5%,
	20: 20%,
	37\.5: 37.5%,
	40: 40%,
	60: 60%,
	75: 75%,
	80: 80%,
	90: 90%,
	100vw: math.div((200 * 0.5) * 100vw, $prototype-width-unitless),
	200vw: math.div((200 * 1) * 100vw, $prototype-width-unitless),
	350vw: math.div((200 * 1.75) * 100vw, $prototype-width-unitless),
	400vw: math.div((200 * 2) * 100vw, $prototype-width-unitless),
	600vw: math.div(200 * 3 * 100vw, $prototype-width-unitless),
	800vw: math.div(200 * 4 * 100vw, $prototype-width-unitless),
	1000vw: math.div(200 * 5 * 100vw, $prototype-width-unitless),
	1200vw: math.div((200 * 6) * 100vw, $prototype-width-unitless),
	1400vw: math.div((200 * 7) * 100vw, $prototype-width-unitless),
	1600vw: math.div((200 * 8) * 100vw, $prototype-width-unitless),
	1800vw: math.div((200 * 9) * 100vw, $prototype-width-unitless),
	1900vw: math.div((200 * 9.5) * 100vw, $prototype-width-unitless),
	2000vw: math.div((200 * 10) * 100vw, $prototype-width-unitless),
	2400vw: math.div((200 * 12) * 100vw, $prototype-width-unitless),
	128vh: math.div(128 * 100vh, $prototype-height-unitless),
	200vh: math.div(200 * 100vh, $prototype-height-unitless),
	360vh: math.div(360 * 100vh, $prototype-height-unitless),
	475vh: math.div(475 * 100vw, $prototype-height-unitless),
);

/**
 * Font families
 *
 * All fonts families found in the site are listed here
 *
 * @uses map-get( $font-families, $key ) to retrieve font  familiy value
 * @type map
 */
$font-families: (
	body: "Suisse Int'l",
	title: 'Suisse Works',
);

/**
 * Font weights
 *
 * Each font weight used in the theme.
 *
 * @uses map-get( $font-weights, weights ) to retrieve font weight value
 * @type map
 */
$font-weights: (
	extralight: 100,
	ultralight: 250,
	light: 300,
	book: 350,
	normal: 400,
	regular: 400,
	medium: 500,
	semibold: 600,
	bold: 700,
	extrabold: 800,
	extrablack: 900,
);

$cursors: pointer text auto not-allowed none wait;

$spacers: map-merge(
	$spacers,
	(
		2px: #{math.div(2, $base-font-size)}rem,
		4px: #{math.div(4, $base-font-size)}rem,
		6px: #{math.div(6, $base-font-size)}rem,
		8px: #{math.div(8, $base-font-size)}rem,
		10px: #{math.div(10, $base-font-size)}rem,
		12px: #{math.div(12, $base-font-size)}rem,
		16px: #{math.div(16, $base-font-size)}rem,
		20px: #{math.div(20, $base-font-size)}rem,
		24px: #{math.div(24, $base-font-size)}rem,
		28px: #{math.div(28, $base-font-size)}rem,
		40px: #{math.div(40, $base-font-size)}rem,
		60px: #{math.div(60, $base-font-size)}rem,
		80px: #{math.div(80, $base-font-size)}rem,
		100px: #{math.div(100, $base-font-size)}rem,
		140px: #{math.div(140, $base-font-size)}rem,
		60vh: math.div(60 * 100vh, $prototype-height-unitless),
		120vh: math.div(120 * 100vh, $prototype-height-unitless),
		200vh: math.div(200 * 100vh, $prototype-height-unitless),
		250vh: math.div(250 * 100vh, $prototype-height-unitless),
		20vw: math.div(20 * 100vw, $prototype-height-unitless),
		100vw: math.div((200 * 0.5) * 100vw, $prototype-width-unitless),
		200vw: math.div((200 * 1) * 100vw, $prototype-width-unitless),
		350vw: math.div((200 * 1.75) * 100vw, $prototype-width-unitless),
		400vw: math.div((200 * 2) * 100vw, $prototype-width-unitless),
		1000vw: math.div((5 * 200) * 100vw, $prototype-width-unitless),
	)
);

$enable-negative-margins: true;
$negative-spacers: if($enable-negative-margins, negativify-map($spacers), null);

$gray-very-dark: #666666;

$custom-theme-colors: (
	red-bright: #dc3545,
	red-light-grayish-01: #f8d7da,
	red-light-grayish-02: #f5c6cb,
	cyan-light-grayish-01: #d1ecf1,
	cyan-light-grayish-02: #bee5eb,
	cyan-very-dark-01: #0c5460,
	gray-dark: #999999,
	gray-very-dark: $gray-very-dark,
	gray-very-light-01: #f8f8f8,
	green-dark-lime: #28a745,
	green-very-dark-lime-01: #155724,
	green-light-grayish-lime-01: #d4edda,
	green-light-grayish-lime-02: #c3e6cb,
);

$border-width: #{math.div(1, $base-font-size)}rem;
$border-widths: (
	1: #{math.div(1, $base-font-size)}rem,
	2: #{math.div(2, $base-font-size)}rem,
	3: #{math.div(3, $base-font-size)}rem,
	4: #{math.div(4, $base-font-size)}rem,
	5: #{math.div(5, $base-font-size)}rem,
);
$border-color: $gray-very-dark;
$border-radius: #{math.div(5, $base-font-size)}rem;

$headings-font-family: 'Suisse Works';
